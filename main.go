package main

import (
	"encoding/json"
	"log"
	"net/http"
	"os"
	"strings"

	"github.com/joho/godotenv"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

var (
	bot *tgbotapi.BotAPI

	// –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è-–ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è, —è–∫–µ –±–∞—á–∏—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–∞ —Å—Ç–∞—Ä—Ç—ñ
	welcomeMessage = "<b>–ü—Ä–∏–≤—ñ—Ç!</b> üëã\n\n" +
		"–ë–∞—á—É, –≤–∏ —Ç—É—Ç, –±–æ –ø–æ—à—É–∫ —Ä–æ–±–æ—Ç–∏ –π–¥–µ –Ω–µ —Ç–∞–∫ –≥–ª–∞–¥–∫–æ, —è–∫ —Ö–æ—Ç—ñ–ª–æ—Å—è –±. –¶–µ –Ω–æ—Ä–º–∞–ª—å–Ω–æ, —Ç–∞–∫–µ –±—É–≤–∞—î –∑ –∫–æ–∂–Ω–∏–º.\n\n" +
		"–î–∞–≤–∞–π—Ç–µ —Ä–æ–∑–±–µ—Ä–µ–º–æ—Å—è, —â–æ —Å–∞–º–µ –≤–∞—Å —Ç—É—Ä–±—É—î. –û–±–µ—Ä—ñ—Ç—å —Å–∏—Ç—É–∞—Ü—ñ—é, —è–∫–∞ –≤–∞–º –Ω–∞–π–±—ñ–ª—å—à–µ –∑–Ω–∞–π–æ–º–∞, —ñ —è –ø—ñ–¥–∫–∞–∂—É, –≤ —á–æ–º—É –º–æ–∂–µ –±—É—Ç–∏ –ø—Ä–∏—á–∏–Ω–∞ —Ç–∞ —â–æ –∑ —Ü–∏–º —Ä–æ–±–∏—Ç–∏."

	// –¢–µ–∫—Å—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π –Ω–∞ –∫–æ–∂–Ω—É –ø—Ä–æ–±–ª–µ–º—É
	responseRejection = "<b>–ü—Ä–æ–±–ª–µ–º–∞:</b> –í–∏ –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î—Ç–µ –¥–µ—Å—è—Ç–∫–∏ —Ä–µ–∑—é–º–µ, –∞ —É –≤—ñ–¥–ø–æ–≤—ñ–¥—å –æ—Ç—Ä–∏–º—É—î—Ç–µ –∞–±–æ –º–∏—Ç—Ç—î–≤–∏–π —Ä–µ–¥–∂–µ–∫—Ç (—Å—Ö–æ–∂–µ –Ω–∞ –±–æ—Ç–∞), –∞–±–æ –ø—Ä–æ—Å—Ç–æ —Ç–∏—à—É.\n\n" +
		"<b>–©–æ —Ü–µ –æ–∑–Ω–∞—á–∞—î:</b>\n" +
		"–ù–∞–π—ñ–º–æ–≤—ñ—Ä–Ω—ñ—à–µ, –≤–∞—à–µ —Ä–µ–∑—é–º–µ –Ω–µ –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –ø–µ—Ä—à–∏–π —Ñ—ñ–ª—å—Ç—Ä. –í–æ–Ω–æ –º–æ–∂–µ –±—É—Ç–∏:\n" +
		"‚Ä¢ <b>–ù–µ—á–∏—Ç–∞–±–µ–ª—å–Ω–∏–º</b> –¥–ª—è ATS-—Å–∏—Å—Ç–µ–º, —è–∫–∏–º–∏ –∫–æ—Ä–∏—Å—Ç—É—é—Ç—å—Å—è —Ä–µ–∫—Ä—É—Ç–µ—Ä–∏.\n" +
		"‚Ä¢ <b>–ù–µ –∞–¥–∞–ø—Ç–æ–≤–∞–Ω–∏–º</b> –ø—ñ–¥ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É –≤–∞–∫–∞–Ω—Å—ñ—é.\n" +
		"‚Ä¢ <b>–°–ª–∞–±–∫–æ</b> –ø—Ä–µ–∑–µ–Ω—Ç—É–≤–∞—Ç–∏ –≤–∞—à –¥–æ—Å–≤—ñ–¥ —ñ –Ω–µ \"—Ç—Ä–∏–≥–µ—Ä–∏—Ç–∏\" —Ä–µ–∫—Ä—É—Ç–µ—Ä–∞.\n\n" +
		"<b>–©–æ —Ä–æ–±–∏—Ç–∏:</b>\n" +
		"–í–∞—à–µ —Ä–µ–∑—é–º–µ ‚Äî —Ü–µ –∫–ª—é—á –¥–æ –¥–≤–µ—Ä–µ–π. –ô–æ–≥–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ –ø—Ä–æ—Ñ–µ—Å—ñ–π–Ω–æ –æ–Ω–æ–≤–∏—Ç–∏ —Ç–∞ –∞–¥–∞–ø—Ç—É–≤–∞—Ç–∏, –∞ –Ω–µ —Å–ø–æ–¥—ñ–≤–∞—Ç–∏—Å—è, —â–æ –Ω–∞ 20-–π —Ä–∞–∑ –ø–æ—â–∞—Å—Ç–∏—Ç—å."

	responseRecruiterFail = "<b>–ü—Ä–æ–±–ª–µ–º–∞:</b> –í–∏ –ø—Ä–æ—Ö–æ–¥–∏—Ç–µ —Å–∫—Ä–∏–Ω—ñ–Ω–≥ —Ä–µ–∑—é–º–µ, –¥–æ—Ö–æ–¥–∏—Ç–µ –¥–æ –¥–∑–≤—ñ–Ω–∫–∞ –∑ —Ä–µ–∫—Ä—É—Ç–µ—Ä–æ–º, –∞–ª–µ –ø—ñ—Å–ª—è –Ω—å–æ–≥–æ –æ—Ç—Ä–∏–º—É—î—Ç–µ –≤—ñ–¥–º–æ–≤—É.\n\n" +
		"<b>–©–æ —Ü–µ –æ–∑–Ω–∞—á–∞—î:</b>\n" +
		"–°–ø—Ä–∞–≤–∞ –Ω–µ –≤ —Ç–µ—Ö–Ω—ñ—á–Ω–∏—Ö –Ω–∞–≤–∏—á–∫–∞—Ö, –∞ –≤ —Å–∞–º–æ–ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü—ñ—ó. –ú–æ–∂–ª–∏–≤—ñ –ø—Ä–∏—á–∏–Ω–∏:\n" +
		"‚Ä¢ –í–∏ –Ω–µ –≤–º—ñ—î—Ç–µ —á—ñ—Ç–∫–æ —Ç–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–≤–∞–Ω–æ —Ä–æ–∑–ø–æ–≤—ñ—Å—Ç–∏ –ø—Ä–æ —Å–≤—ñ–π –¥–æ—Å–≤—ñ–¥.\n" +
		"‚Ä¢ –ó–≤—É—á–∏—Ç–µ –Ω–µ–≤–ø–µ–≤–Ω–µ–Ω–æ –∞–±–æ, –Ω–∞–≤–ø–∞–∫–∏, –∑–≤–µ—Ä—Ö–Ω—å–æ.\n" +
		"‚Ä¢ \"–ü–ª–∞–≤–∞—î—Ç–µ\" –≤ –ø–∏—Ç–∞–Ω–Ω—è—Ö –ø—Ä–æ –∑–∞—Ä–ø–ª–∞—Ç–Ω—ñ –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è.\n" +
		"‚Ä¢ –ù–µ –≤–º—ñ—î—Ç–µ –ø—ñ–¥—Ç—Ä–∏–º–∞—Ç–∏ —Ä–æ–∑–º–æ–≤—É —ñ —Å–ø—Ä–∞–≤–∏—Ç–∏ –≥–∞—Ä–Ω–µ –ø–µ—Ä—à–µ –≤—Ä–∞–∂–µ–Ω–Ω—è.\n\n" +
		"<b>–©–æ —Ä–æ–±–∏—Ç–∏:</b>\n" +
		"–ü—Ä–æ—Ö–æ–¥–∂–µ–Ω–Ω—è —ñ–Ω—Ç–µ—Ä–≤'—é ‚Äî —Ü–µ –Ω–∞–≤–∏—á–∫–∞, —è–∫—É –º–æ–∂–Ω–∞ —ñ —Ç—Ä–µ–±–∞ —Ç—Ä–µ–Ω—É–≤–∞—Ç–∏. –í–∞—Å —Ü—å–æ–º—É –Ω–µ –≤—á–∏–ª–∏, —Ç–æ–º—É –Ω–µ —Å–æ—Ä–æ–º–Ω–æ –∑–≤–µ—Ä–Ω—É—Ç–∏—Å—è –ø–æ –¥–æ–ø–æ–º–æ–≥—É."

	responseTechFail = "<b>–ü—Ä–æ–±–ª–µ–º–∞:</b> –ü'—è—Ç—å —Ç–µ—Ö–Ω—ñ—á–Ω–∏—Ö —ñ–Ω—Ç–µ—Ä–≤'—é ‚Äî –ø'—è—Ç—å \"—Ñ–∞–∫–∞–ø—ñ–≤\". –í–∏ –≤—ñ–¥—á—É–≤–∞—î—Ç–µ, —â–æ –Ω–µ –¥–æ—Ç—è–≥—É—î—Ç–µ —Å–∞–º–µ –Ω–∞ —Ü—å–æ–º—É –µ—Ç–∞–ø—ñ.\n\n" +
		"<b>–©–æ —Ü–µ –æ–∑–Ω–∞—á–∞—î:</b>\n" +
		"–ü—Ä–æ–±–ª–µ–º–∞ –Ω–µ –≤ —Ç–æ–º—É, —â–æ –≤–∏ –ø–æ–≥–∞–Ω–∏–π —Å–ø–µ—Ü—ñ–∞–ª—ñ—Å—Ç, –∞ –≤ –ø—ñ–¥—Ö–æ–¥—ñ –¥–æ –ø—ñ–¥–≥–æ—Ç–æ–≤–∫–∏ —Ç–∞ –ø—Ä–æ—Ö–æ–¥–∂–µ–Ω–Ω—è —Å–ø—ñ–≤–±–µ—Å—ñ–¥–∏. –ú–æ–∂–ª–∏–≤–æ, –≤–∏:\n" +
		"‚Ä¢ –ì—É–±–∏—Ç–µ—Å—è –ø—ñ–¥ —Ç–∏—Å–∫–æ–º.\n" +
		"‚Ä¢ –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ —Ä–æ–∑—É–º—ñ—î—Ç–µ, —â–æ –≤—ñ–¥ –≤–∞—Å —Ö–æ—á—É—Ç—å –ø–æ—á—É—Ç–∏.\n" +
		"‚Ä¢ –ü–æ–≤—Ç–æ—Ä—é—î—Ç–µ —Ç—ñ —Å–∞–º—ñ –ø–æ–º–∏–ª–∫–∏, –Ω–µ –∞–Ω–∞–ª—ñ–∑—É—é—á–∏ —ó—Ö.\n\n" +
		"<b>–©–æ —Ä–æ–±–∏—Ç–∏:</b>\n" +
		"–ü–æ—Ç—Ä—ñ–±–µ–Ω —Å–∏—Å—Ç–µ–º–Ω–∏–π –∞–Ω–∞–ª—ñ–∑. –í–∞—Ä—Ç–æ —Ä–æ–∑—ñ–±—Ä–∞—Ç–∏ –∫–æ–∂–Ω—É –Ω–µ–≤–¥–∞–ª—É —Å–ø—ñ–≤–±–µ—Å—ñ–¥—É, –∑–Ω–∞–π—Ç–∏ —Å–ª–∞–±–∫—ñ –º—ñ—Å—Ü—è —Ç–∞ —Ü—ñ–ª–µ—Å–ø—Ä—è–º–æ–≤–∞–Ω–æ —ó—Ö –ø—ñ–¥—Ç—è–≥–Ω—É—Ç–∏. –Ü–Ω–æ–¥—ñ –¥–ª—è —Ü—å–æ–≥–æ –ø–æ—Ç—Ä—ñ–±–µ–Ω —Å–≤—ñ–∂–∏–π –ø–æ–≥–ª—è–¥ –∑–±–æ–∫—É."

	responseNoResult = "<b>–ü—Ä–æ–±–ª–µ–º–∞:</b> –í–∏ –æ–Ω–æ–≤–∏–ª–∏ —Ä–µ–∑—é–º–µ, –ø—Ä–æ–∫–∞—á–∞–ª–∏ LinkedIn, –ø—Ä–æ–π—à–ª–∏ –¥–µ–∫—ñ–ª—å–∫–∞ —Å–ø—ñ–≤–±–µ—Å—ñ–¥, –∞–ª–µ –æ—Ñ–µ—Ä—É –≤—Å–µ –Ω–µ–º–∞—î. –ß–∞—Å —ñ–¥–µ, –∞ –º–æ—Ç–∏–≤–∞—Ü—ñ—è —Ç–∞–Ω–µ.\n\n" +
		"<b>–©–æ —Ü–µ –æ–∑–Ω–∞—á–∞—î:</b>\n" +
		"–¶–µ –Ω–∞–π–Ω–µ–±–µ–∑–ø–µ—á–Ω—ñ—à–∏–π –¥–∑–≤—ñ–Ω–æ—á–æ–∫. –í–∏ –ø–æ—Ç—Ä–∞–ø–∏–ª–∏ –≤ –∑–∞–º–∫–Ω–µ–Ω–µ –∫–æ–ª–æ, —ñ —Å–∞–º–æ—Å—Ç—ñ–π–Ω—ñ –¥—ñ—ó –Ω–µ –¥–∞—é—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É. –¶–µ –ø—Ä–∏–∑–≤–æ–¥–∏—Ç—å –¥–æ –≤–∏–≥–æ—Ä–∞–Ω–Ω—è —Ç–∞ –∑–Ω–µ–≤—ñ—Ä–∏ —É –≤–ª–∞—Å–Ω–∏—Ö —Å–∏–ª–∞—Ö.\n\n" +
		"<b>–©–æ —Ä–æ–±–∏—Ç–∏:</b>\n" +
		"–í–∞–º –ø–æ—Ç—Ä—ñ–±–Ω–∞ –Ω–µ –ø—Ä–æ—Å—Ç–æ –ø–æ—Ä–∞–¥–∞, –∞ <b>–∫–æ–º–ø–ª–µ–∫—Å–Ω–∏–π —Å—É–ø—Ä–æ–≤—ñ–¥</b>. –ü–æ—Ç—Ä—ñ–±–µ–Ω –ø—Ä–æ—Ñ–µ—Å—ñ–æ–Ω–∞–ª, —è–∫–∏–π –∑–∞–Ω—É—Ä–∏—Ç—å—Å—è —É –≤–∞—à—É —Å–∏—Ç—É–∞—Ü—ñ—é, –∑–Ω–∞–π–¥–µ –∫–æ—Ä—ñ–Ω—å –ø—Ä–æ–±–ª–µ–º–∏, —Ä–æ–∑—Ä–æ–±–∏—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥—ñ—é —ñ –±—É–¥–µ –ø–æ—Ä—É—á –Ω–∞ –∫–æ–∂–Ω–æ–º—É –∫—Ä–æ—Ü—ñ –¥–æ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –æ—Ñ–µ—Ä—É."

	// --- –¢–µ–∫—Å—Ç–∏ –∫–Ω–æ–ø–æ–∫ —Ç–∞ –¥–∞–Ω—ñ –¥–ª—è Callback ---

	// –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é
	btnTextRejection = "–í—ñ–¥–≥—É–∫ ‚ûû –í—ñ–¥–º–æ–≤–∞"
	btnDataRejection = "rejection_fail" // callback_data

	btnTextRecruiterFail = "–ü—Ä–æ–≤–∞–ª—é—é —Å–ø—ñ–≤–±–µ—Å—ñ–¥—É –∑ —Ä–µ–∫—Ä—É—Ç–µ—Ä–æ–º"
	btnDataRecruiterFail = "recruiter_fail" // callback_data

	btnTextTechFail = "–ü—Ä–æ–≤–∞–ª—é—é —Ç–µ—Ö–Ω—ñ—á–Ω—É —Å–ø—ñ–≤–±–µ—Å—ñ–¥—É"
	btnDataTechFail = "tech_fail" // callback_data

	btnTextNoResult = "–†–æ–±–ª—é –≤—Å–µ, –∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É –Ω–µ–º–∞—î"
	btnDataNoResult = "no_result" // callback_data

	// –ù–∞–≤—ñ–≥–∞—Ü—ñ—è —Ç–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∏
	btnTextBack = "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –¥–æ –º–µ–Ω—é"
	btnDataBack = "back_to_main" // callback_data

	btnTextContact = "‚úçÔ∏è –ó–≤'—è–∑–∞—Ç–∏—Å—è –∑ –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–æ–º"
	contactURL     = "https://t.me/Anastasiia_hrg" // –ü—Ä—è–º–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –∫–æ–Ω—Ç–∞–∫—Ç

	// --- –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ (Markup) ---

	// –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –¥–ª—è –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é. 4 –∫–Ω–æ–ø–∫–∏, —Ä–æ–∑—Ç–∞—à–æ–≤–∞–Ω—ñ —É 2 —Ä—è–¥–∏
	mainMenuMarkup = tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData(btnTextRejection, btnDataRejection),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData(btnTextRecruiterFail, btnDataRecruiterFail),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData(btnTextTechFail, btnDataTechFail),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData(btnTextNoResult, btnDataNoResult),
		),
	)

	// –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –¥–ª—è –º–µ–Ω—é –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ. –î–≤—ñ –∫–Ω–æ–ø–∫–∏: –æ–¥–Ω–∞ –¥–ª—è –∫–æ–Ω—Ç–∞–∫—Ç—É, —ñ–Ω—à–∞ –¥–ª—è –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –Ω–∞–∑–∞–¥
	responseMarkup = tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonURL(btnTextContact, contactURL),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData(btnTextBack, btnDataBack),
		),
	)
)

func main() {
	var err error

	godotenv.Load()

	botToken := os.Getenv("BOT_TOKEN")
	if botToken == "" {
		log.Fatal("BOT_TOKEN environment variable not set.")
	}

	bot, err = tgbotapi.NewBotAPI(botToken)
	if err != nil {
		log.Panic(err)
	}

	// Set debug mode if DEBUG environment variable is "true"
	debugEnv := os.Getenv("DEBUG")
	bot.Debug = strings.ToLower(debugEnv) == "true"

	log.Printf("Authorized on account %s", bot.Self.UserName)

	// Get the WEBHOOK_URL from environment variables
	// This will be the URL of your deployed Cloud Run service + the webhook path
	webhookURL := os.Getenv("WEBHOOK_URL")
	if webhookURL == "" {
		log.Fatal("WEBHOOK_URL environment variable not set. This should be your Cloud Run service URL including the path (e.g., https://<service-url>/telegram-webhook).")
	}

	wh, err := tgbotapi.NewWebhook(webhookURL)
	if err != nil {
		log.Fatalf("Failed to create webhook config: %v", err)
	}
	// Use bot.Request to send the WebhookConfig to Telegram
	_, err = bot.Request(wh)
	if err != nil {
		log.Fatalf("Failed to set webhook: %v", err)
	}

	// Get webhook info to confirm it's set and check for any errors from Telegram's side
	info, err := bot.GetWebhookInfo()
	if err != nil {
		log.Fatalf("Failed to get webhook info: %v", err)
	}
	if info.LastErrorDate != 0 {
		log.Printf("Telegram last webhook error: %s", info.LastErrorMessage)
	}
	log.Printf("Webhook set to: %s (pending: %t)", info.URL, info.PendingUpdateCount > 0)

	// Get the port from environment variables, default to 8080 for Cloud Run
	port := os.Getenv("PORT")
	if port == "" {
		port = "8080"
	}
	addr := ":" + port

	// Create a new HTTP multiplexer
	mux := http.NewServeMux()

	// Define the webhook endpoint that Telegram will send updates to
	// It's good practice to use a non-root path for webhooks.
	mux.HandleFunc("/telegram-webhook", func(w http.ResponseWriter, r *http.Request) {
		if r.Method != http.MethodPost {
			http.Error(w, "Only POST requests are allowed", http.StatusMethodNotAllowed)
			return
		}

		var update tgbotapi.Update
		// Decode the JSON request body into a tgbotapi.Update struct
		if err := json.NewDecoder(r.Body).Decode(&update); err != nil {
			log.Printf("ERROR: Could not decode update: %v", err)
			http.Error(w, "Bad Request", http.StatusBadRequest)
			return
		}

		// Process the update in a non-blocking way if possible,
		// but for simple bots, direct handling is fine.
		handleUpdate(update)

		// Respond with 200 OK to Telegram immediately
		// This acknowledges receipt of the update and prevents Telegram from retrying.
		w.WriteHeader(http.StatusOK)
	})

	// Add a health check endpoint for Cloud Run
	// Cloud Run sends requests to the root path by default for health checks.
	mux.HandleFunc("/", func(w http.ResponseWriter, r *http.Request) {
		w.WriteHeader(http.StatusOK)
		w.Write([]byte("OK"))
	})

	log.Printf("Starting HTTP server on %s", addr)
	// Start the HTTP server. This will block indefinitely, serving requests.
	if err := http.ListenAndServe(addr, mux); err != nil {
		log.Fatalf("HTTP server failed: %v", err)
	}
}

func handleUpdate(update tgbotapi.Update) {
	if update.CallbackQuery != nil {
		user := update.CallbackQuery.From
		text := update.CallbackQuery.Data

		log.Printf("'[%s] %s %s' selected '%s'", user.UserName, user.FirstName, user.LastName, text)

		// –°—Ç–≤–æ—Ä—é—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è
		// bot.AnswerCallbackQuery(tgbotapi.NewCallback(update.CallbackQuery.ID, ""))
		msg := tgbotapi.NewEditMessageText(
			update.CallbackQuery.Message.Chat.ID,
			update.CallbackQuery.Message.MessageID,
			"", // –¢–µ–∫—Å—Ç –±—É–¥–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∏–∂—á–µ
		)

		// –í–∏–∑–Ω–∞—á–∞—î–º–æ, —è–∫–∞ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –±—É–¥–µ —É –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
		var markup tgbotapi.InlineKeyboardMarkup

		switch update.CallbackQuery.Data {
		case btnDataRejection:
			msg.Text = responseRejection
			markup = responseMarkup
		case btnDataRecruiterFail:
			msg.Text = responseRecruiterFail
			markup = responseMarkup
		case btnDataTechFail:
			msg.Text = responseTechFail
			markup = responseMarkup
		case btnDataNoResult:
			msg.Text = responseNoResult
			markup = responseMarkup
		case btnDataBack:
			msg.Text = welcomeMessage
			markup = mainMenuMarkup
		}

		msg.ReplyMarkup = &markup
		msg.ParseMode = "HTML" // –í–∞–∂–ª–∏–≤–æ, —â–æ–± —Ç–µ–≥–∏ <b> –ø—Ä–∞—Ü—é–≤–∞–ª–∏
		bot.Send(msg)
	}

	// –Ø–∫—â–æ —Ü–µ –∫–æ–º–∞–Ω–¥–∞ /start
	if update.Message != nil && update.Message.IsCommand() {
		user := update.Message.From
		log.Printf("'[%s] %s %s' started chat", user.UserName, user.FirstName, user.LastName)

		if update.Message.Command() == "start" {
			msg := tgbotapi.NewMessage(update.Message.Chat.ID, welcomeMessage)
			msg.ParseMode = "HTML"
			msg.ReplyMarkup = mainMenuMarkup
			bot.Send(msg)
		}
	}
}
